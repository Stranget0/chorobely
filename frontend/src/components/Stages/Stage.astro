---
interface Props {
  initiallyShown?: boolean;
  class?: string;
}

const { initiallyShown, class: className } = Astro.props;
---

<script>
  import mainPageStore from "../../stores/mainPage/mainPage";
  import { getStageFromState } from "../../stores/mainPage/utils";

  import { Cards } from "../Card/Cards";

  const { selectCard, initialize } = mainPageStore.getState();

  function importAndAddListBox(target: HTMLElement, cleanArr: VoidFunction[]) {
    let isCanceled = false;
    cleanArr.push(() => {
      isCanceled = true;
    });
    import("../../utils/ariaBehaviours/listBox").then(
      ({ addListBoxBehaviour }) => {
        if (isCanceled) return;
        const { cleanListBoxListeners } = addListBoxBehaviour(
          target,
          "horizontal",
          { focusOnInactive: true }
        );
        cleanArr.push(cleanListBoxListeners);
      }
    );
  }

  let clean: VoidFunction | null = null;

  mainPageStore.subscribe(getStageFromState, (stage, prevStage) => {
    clean?.();
    clean = null;
    const { price, stages } = mainPageStore.getState();
    
		const stageToHide = prevStage
      ? prevStage
      : stages[0] !== stage
      ? stages[0]
      : undefined;

    if (stageToHide) stageToHide.classList.add("hidden");
    if (stage) {
      const newCleanArr: VoidFunction[] = [];
      const cards = Cards.getFrom(stage);
      stage.classList.remove("hidden");
      const listbox = stage.querySelector<HTMLElement>(".listbox");
      if (listbox?.role === "listbox") {
        importAndAddListBox(stage, newCleanArr);
      }
      cards.updatePrices(price);

      clean = () => newCleanArr.forEach((c) => c());
    }
  });

  const stages = Array.from(document.querySelectorAll<HTMLElement>(".stage"));

  for (const stage of stages) {
    const cards = Cards.getFrom(stage);
    cards.addHandlers("click", selectCard);
  }
	
  initialize(stages);
</script>

<div
  class:list={[
    "stage",
    "flex",
    "flex-col",
    className,
    { hidden: !initiallyShown },
  ]}
>
  <slot />
</div>
