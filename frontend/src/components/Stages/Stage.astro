---
import type { Stage } from "../../types";
import Card from "../Card/Card.astro";

interface Props extends Partial<Stage> {
  initiallyShown?: boolean;
}

const { options = [], priceMod = "+", title, initiallyShown } = Astro.props;
---

<script>
  import mainPageStore, {
    subscribeToCurrentStage,
  } from "../../stores/mainPage/mainPage";

  import { Cards } from "../Card/Cards";

  const { selectCard, initialize, modifyPrice } = mainPageStore.getState();

  function cardHandler(card: HTMLElement) {
    const { priceMod, value } = Cards.getDataFromCard(card);
    selectCard(card);
    modifyPrice(priceMod, value);
  }

  function importAndAddListBox(target: HTMLElement, cleanArr: VoidFunction[]) {
    let isCanceled = false;
    cleanArr.push(() => {
      isCanceled = true;
    });
    import("../../utils/ariaBehaviours/listBox").then(
      ({ addListBoxBehaviour }) => {
        if (isCanceled) return;
        const { cleanListBoxListeners } = addListBoxBehaviour(
          target,
          "horizontal",
          { focusOnInactive: true }
        );
        cleanArr.push(cleanListBoxListeners);
      }
    );
  }

  let clean: VoidFunction | null = null;
  subscribeToCurrentStage((stage, prevStage) => {
    clean?.();
    clean = null;
    if (prevStage) {
      prevStage.classList.add("hidden");
    }
    if (stage) {
      const { price } = mainPageStore.getState();
      const newCleanArr: VoidFunction[] = [];
      const cards = Cards.getFrom(stage);

      stage.classList.remove("hidden");
      const listbox = stage.querySelector<HTMLElement>(".listbox");
      if (listbox?.role === "listbox") {
        importAndAddListBox(stage, newCleanArr);
      }

      cards.updatePrices(price);
      const { cleanCards } = cards.addHandlers("click", cardHandler);
      newCleanArr.push(cleanCards);

      clean = () => newCleanArr.forEach((c) => c());
    }
  });

  initialize(Array.from(document.querySelectorAll(".stage")));
</script>

<div
  class:list={[
    "stage",
    "flex",
    "flex-col",
    "gap-16",
    { hidden: !initiallyShown },
  ]}
>
  <h2 class='p-4 motion-safe:animate-appear-300'>{title}</h2>
  <div class='overflow-x-auto'>
    <ul
      class='listbox flex motion-safe:animate-appear-300 w-full justify-center flex-wrap gap-4'
      role='listbox'
    >
      {
        options.map((card, i) => (
          <Card
            {...card}
            priceMod={priceMod}
            index={i}
            length={options.length}
          />
        ))
      }
    </ul>
  </div>
</div>
